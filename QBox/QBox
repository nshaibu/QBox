#!/bin/bash

#===========================================================================================
# Copyright (C) 2016 Nafiu Shaibu.
# Purpose: Manage Virtual Machines
#-------------------------------------------------------------------------------------------
# QBox is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your option) 
# any later version.

# QBox is distributed in the hopes that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#===========================================================================================

: ${LIB_DIR:=$HOME/my_script/QB/QBox/include_dir}

. ${LIB_DIR}/include

. ${LIB_DIR}/import '<init.h>'
. ${LIB_DIR}/import '<qdb_database.h>'
. ${LIB_DIR}/import '<boot_vm.h>'
. ${LIB_DIR}/import '<notify.h>'

if NOT_DEFINE ${LOGGS_H} || NOT_DEFINE ${BASIC_UTILS_H}; then
	. ${LIB_DIR}/include '<loggs.h>'
	. ${LIB_DIR}/include '<basic_utils.h>'
fi 

##Setting up colors
BOLD="tput bold"
RESET="tput sgr0"
#clear
#SCR_TTY_MSG=("\t\t`${BOLD}`_QBox_Menu_`${RESET}`" "1._Boot_Created_Virtual_Machine" "3._Delete_Virtual_Machine" "4._Other_Options")
#_display_center
#exit 0
case $1 in
	-[Cc]|[Cc]|--[Cc][Oo][Pp][Yy][Rr][Ii][Gg][Hh][Tt]|[Cc][Oo][Pp][Yy][Rr][Ii][Gg][Hh][Tt])
		echo -e "QBox Easy VM Manager Copyleft (\u0254) 2016 nafiu shaibu\nQEMU is a trademark of fabrice bellard\n"
		printf "%s\n" "QBox comes with ABSOLUTELY NO WARRANTY." \
			"You may redistribute copies of this program" \
			"under the terms of the GNU General Public License." \
			"For more information about these matters, see the file named COPYING." && echo
	;;
	
	-s|--[Ss][Tt][Aa][Rr][Tt][Vv][Mm]) 
		NAME=`echo $2 | awk '{print toupper($0)}'`
		search="^${NAME}$"
	
		set `gawk -F "|" -v var=$search '$1 ~ var {print $2 " " $3}' ${QDB_FOLDER}/vms.qdb`
		if [[ $2 = "F" ]]; then
			bash ${QBOX_DIR}/bash_s/qemu-bootfile-reader.sh $1 ${NAME}
		fi 
	;;
	
	-[Hh]|--[Hh][Ee][Ll][Pp])
		printf "%s\n" "usage:QBox [Option]"
			
		printf "%s\n" "Options:		long Options" \
				"    -c,-C		--copyright, --COPYRIGHT" \
				"    -h,-H		--help,--HELP" \
				"     nocheck 		Do not check for packages" && echo
		printf "%s\n" "Contact me @ <github.com/nshaibu>" && echo 
		printf "%s\n" "QBox help users create and manage virtual machines locally and remotely" \
			"by just knowing how to press keys like [ENTER] and answering yes or " \
			"no questions" && echo
		printf "%s\n" "To run this program on microsoft windows, install cygwin and Xserver." \
			"The program might not work very well on other shells like ksh, csh, tcsh. You" \
			"can make the neccesary changes to the code by reading the README file or use" \
			"sh/bash shell" && echo
	;;
	
	--[Cc][Ll][Ii]|-[Ii])
	
		##check for paclages 
		if [[ "$2" != "nocheck" ]]; then
			bash ${QBOX_DIR}/bash_s/check_pkg_install.sh %CHECK_START%
		fi 
	
		type $NOTICE >/dev/null 2>&1 && $NOTICE -u low -t 3 -i ${QBOX_DIR}/icon/QBox.png QBox "The Easy VM Manager" 
		. ${BASIC_BASH}/qemu-ansi-art.sh
	
		function other_options_menu(){
			clear
			#move_center 38 10
			#echo
			tput bold
			echo -e "\t\t\tOther Options\n"
			tput sgr0
			echo -e "\t1. Information On Virtual Machines"
			echo -e "\t2. Create Shortcut"
			echo -e "\t3. QBox Logs"
			echo -e "\t0. Back \u2b05 \n\n"
	
			echo -en "\t\tEnter Option: "
			read -n 1 opt
		}	
	
	
		function qemu_menu_func(){
			clear
			#move_center 40 10
			echo
			echo -e "\t\t\t\t `${BOLD}` QBox Menu `${RESET}`\n"
			echo -e "\t1. Boot Created Virtual Machine"
			echo -e "\t2. Create New Virtual Machine"
			echo -e "\t3. Delete Virtual Machine"
			echo -e "\t4. Other Options"
			echo -e "\t5. Reconfigure Virtual Machine"
			echo -e "\t6. Stop Running Virtual Machine"
			echo -e "\t7. QBox Remote Manager"
			echo -e "\t8. Direct Linux Boot"
			echo -e "\t0. Exit `tput setaf 9` \U274C \n\n"
			tput sgr0
		
			echo -en "\t\tEnter Option: "
			read -n 1 option
		}


		while true
		do
			clear
			qemu_menu_func
	
			case $option in
				0) break;;
				1) 
					declare -a QDB_ARR=( $(init_database_qdb ${VMS_DB}) )
					
					if [[ ${#QDB_ARR[*]} -eq 0 ]]; then 
						tput setaf 9
						printf "\n\t%s\n" "No Virtual Machine created yet..."
						tput sgr0
					else 
						echo -e "\n\nselect a vm"
						
						for (( index=0; index<${#QDB_ARR[*]}; index++)); do
							vm_info=${QDB_ARR[$index]//\"/}
							echo "  $(( index+1 )).       $(return_first_field ${vm_info})"
						done 
						
						printf "\n%s" "Enter the name of the VM to boot[ENTER] "
						read name
						
						if [[ -n ${name} ]]; then
							name=$(String_to_Upper ${name}) 
							startvm ${name}
						fi
					fi 
			;;
				2) bash ${QBOX_DIR}/bash_s/qemu-im-box.sh ;;
				3) 
					#bash ${QBOX_DIR}/bash_s/qemu-sql-vms.sh l 2>/dev/null
					declare -a QDB_ARR=( $(init_database_qdb ${VMS_DB}) )
							
					if [[ ${#QDB_ARR[*]} -eq 0 ]]; then 
						tput setaf 9
						printf "\n\t%s\n" "No Virtual Machine created yet..."
						tput sgr0
					else 
						echo -e "\n\nselect a vm"
							
						for (( index=0; index<${#QDB_ARR[*]}; index++)); do
							vm_info=${QDB_ARR[$index]//\"/}
							echo "  $(( index+1 )).       $(return_first_field ${vm_info})"
						done 					
						
						echo
						printf "%s" "Enter the name of the VM to delete[ENTER] "
						read name
				
						[ "$name" != "" ] && { 
							name=$(String_to_Upper $name)
							let sizeof_arr=${#QDB_ARR[@]}
							QDB_ARR[$sizeof_arr]=${name}
							
							QDB_ARR=( $(search_val_qdb ${QDB_ARR[@]}) )
							let sizeof_arr=${#QDB_ARR[@]}
							vm_info_index=${QDB_ARR[$(( --sizeof_arr ))]}
							
							[ ${vm_info_index} -ne ${ARR_IS_EMPTY} ] && [ ${vm_info_index} -ne ${SRCH_VAL_NOT_IN_ARR} ] && {
								(( sizeof_arr++ ))
								QDB_ARR[$(( sizeof_arr++ ))]=${vm_info}
								QDB_ARR[$sizeof_arr]=${VMS_DB}
								
								QDB_ARR=( $(delete_val_qdb ${QDB_ARR[@]}) )
							}
						}
					fi 
			;;
				4) 
				
					while true ; do 
						clear 
						other_options_menu
					
						case $opt in
						0) break ;;
						1) 
							declare -a QDB_ARR=( $(init_database_qdb ${VMS_DB}) )
							
							if [[ ${#QDB_ARR[*]} -eq 0 ]]; then 
								tput setaf 9
								printf "\n\t%s\n" "No Virtual Machine created yet..."
								tput sgr0
							else 
								echo -e "\n\nselect a vm"
							
								for (( index=0; index<${#QDB_ARR[*]}; index++)); do
									vm_info=${QDB_ARR[$index]//\"/}
									echo "  $(( index+1 )).       $(return_first_field ${vm_info})"
								done 						
								
								echo
								read -p "Choose a VM[ENTER] " name
								
								[ "$name" != "" ] && {
									let sizeof_arr=${#QDB_ARR[@]}
									name=$(String_to_Upper $name)
									QDB_ARR[sizeof_arr]=${name}
									
									QDB_ARR=( $(search_val_qdb ${QDB_ARR[@]}) )
									let sizeof_arr=${#QDB_ARR[@]}
									let vm_info_index=${QDB_ARR[$(( --sizeof_arr ))]} && unset 'QDB_ARR[$sizeof_arr]'
									
									[ ${vm_info_index} -ne ${ARR_IS_EMPTY} ] && [ ${vm_info_index} -ne ${SRCH_VAL_NOT_IN_ARR} ] && {
										boot_file_name=${QDB_ARR[$vm_info_index]//\"/}
										boot_file_name=$(return_second_field ${boot_file_name})
										
										clear
										bash ${BASIC_BASH}/qbox_display_vm_info.sh "${BOOT_DIR}/${boot_file_name}"
									}
								} 						
							fi 
						;;
						2) bash ${BASIC_BASH}/create_desktop_file.sh ;;
						3) bash ${BASIC_BASH}/bash_s/qboxlogs.sh ;;
						*) 
							clear
							echo "wrong Option"		
						 ;;
						esac
						
						echo -en "\n\n\t\t\tHit any key to continue"
						read -n 1 line
						
					done
				
				;;
				5) bash ${QBOX_DIR}/bash_s/qemu-reconfigure.sh ;;
				6) 
					_clear_pid_qdb_event
					echo
					
					declare -a QDB_ARR=( $(init_database_qdb ${PID_DB}) )
							
					if [[ ${#QDB_ARR[*]} -eq 0 ]]; then 
						tput setaf 9
						printf "\n\t%s\n" "No Virtual is running..."
						tput sgr0
					else 
						echo -e "\n\nRunning Virtual Machines..."
							
						for (( index=0; index<${#QDB_ARR[*]}; index++)); do
								vm_info=${QDB_ARR[$index]//\"/}
								echo "  $(( index+1 )).       $(return_first_field ${vm_info})"
						done 						
								
						echo
						read -p "Enter the name of VM to stop[ENTER] " vmn
					
						#let x=0
						[[ "$vmn" != "" ]] && {
							name=$(String_to_Upper ${vmn}) 
							let sizeof_arr=${#QDB_ARR[@]}
							
							QDB_ARR[$sizeof_arr]=${name}
							QDB_ARR=( $(search_val_qdb ${QDB_ARR[@]}) )
							let sizeof_arr=${#QDB_ARR[@]}
							vm_info_index=${QDB_ARR[$(( --sizeof_arr ))]} && unset 'QDB_ARR[$sizeof_arr]'
							
							[ ${vm_info_index} -ne ${ARR_IS_EMPTY} ] && [ ${vm_info_index} -ne ${SRCH_VAL_NOT_IN_ARR} ] && {
								pid_t=$(return_second_field ${QDB_ARR[$vm_info_index]})
								
								pid_t=${pid_t//\"/}
								kill -9 ${pid_t}
							}
						}
					fi
			;;
				7) bash ${QBOX_DIR}/bash_s/qboxhttpd.sh ;;
				8) bash ${QBOX_DIR}/bash_s/direct_linux_boot.sh ;;
				*)
					clear
					echo "wrong Option";;
			esac
		
			echo -en "\n\n\t\t\tHit any key to continue"
			read -n 1 line
		done
		clear
	;;
	*) 
		. ${QBOX_DIR}/dialog_ui/qbox_main_menu.sh
		clear
	;;
esac

exit 0
