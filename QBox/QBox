#!/bin/bash

#===========================================================================================
# Copyright (C) 2016 Nafiu Shaibu.
# Purpose: Manage Virtual Machines
#-------------------------------------------------------------------------------------------
# QBox is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your option) 
# any later version.

# QBox is distributed in the hopes that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#===========================================================================================

HD_IMG_DIR=$HOME/.img_qemubox ##contains harddisk images
TEMP_FOLDER=${HD_IMG_DIR}/.tmp_qbox
PID_FILE=${TEMP_FOLDER}/.pid
QDB_FOLDER=${HD_IMG_DIR}/.qdb
BOOT_DIR=${HD_IMG_DIR}/.qemuboot ## contain boot files
LOG_DIR=${HD_IMG_DIR}/logs_dir
TEMP_FOLDER=${HD_IMG_DIR}/.tmp_qbox

QBOX_DIR=/usr/local/bin/QBox
NOTICE=`${QBOX_DIR}/bash_s/check_pkg_install.sh %CHECK_RUN% notify-send`

[ ! -d ${HD_IMG_DIR} ] && mkdir ${HD_IMG_DIR} ##Check and creates Harddisk image folder
[ ! -d ${BOOT_DIR} ] && mkdir ${BOOT_DIR} ##check and create boot folder
[ ! -d ${QDB_FOLDER} ] && mkdir ${QDB_FOLDER} ##check for qbox database folder
[ ! -d ${TEMP_FOLDER} ] && mkdir ${TEMP_FOLDER} ##check and creates tmp folder
[ ! -d ${LOG_DIR} ] && mkdir ${LOG_DIR} && touch ${LOG_DIR}/qboxlog ##check and create log directory
[ ! -f ${PID_FILE} ] && touch ${PID_FILE}
[ ! -f ${QDB_FOLDER}/pid.qdb ] && touch ${QDB_FOLDER}/pid.qdb ##check pid database vm_name|pid
[ ! -f ${QDB_FOLDER}/vms.qdb ] && touch ${QDB_FOLDER}/vms.qdb

echo -ne "\033]0;QBox Easy VM Manager \007"


##Setting up colors
BOLD="tput bold"
RESET="tput sgr0"

##SDL 
export SDL_VIDEO_X11_DGAMOUSE=0 ##to prevent qemu cursor from been difficult to control

function vm_kill_term_eventhandler(){
	if [ "`cat ${QDB_FOLDER}/pid.qdb`" != "" ]; then
		for i in `cut -d "|" -f2 ${QDB_FOLDER}/pid.qdb`;do 
				
			if [ ! -d /proc/$i ]; then
				name="^$i\$"
				echo $(gawk -F "|" -v var=$name '$2 !~ var {print $0}' ${QDB_FOLDER}/pid.qdb) > ${TEMP_FOLDER}/vms.tt
				##replace black or space character with newline character
				sed -e 's/[[:blank:]]\+/\n/g' ${TEMP_FOLDER}/vms.tt 2>/dev/null 1> ${QDB_FOLDER}/pid.qdb
				rm -f ${TEMP_FOLDER}/vms.tt 2>/dev/null
			fi 
		done 
	fi
}


#trap vm_kill_term_eventhandler 1 2 3 9 15
export SDL_VIDEO_X11_DGAMOUSE=0 ##to prevent qemu cursor from been difficult to control

case $1 in
	-[Cc]|[Cc]|--[Cc][Oo][Pp][Yy][Rr][Ii][Gg][Hh][Tt]|[Cc][Oo][Pp][Yy][Rr][Ii][Gg][Hh][Tt])
		echo -e "QBox Easy VM Manager Copyleft (\u0254) 2016 nafiu shaibu\nQEMU is a trademark of fabrice bellard\n"
		printf "%s\n" "QBox comes with ABSOLUTELY NO WARRANTY." \
			"You may redistribute copies of this program" \
			"under the terms of the GNU General Public License." \
			"For more information about these matters, see the file named COPYING." && echo
	;;
	
	-s|--[Ss][Tt][Aa][Rr][Tt][Vv][Mm]) 
	NAME=`echo $2 | awk '{print toupper($0)}'`
	search="^${NAME}$"
	
	set `gawk -F "|" -v var=$search '$1 ~ var {print $2 " " $3}' ${QDB_FOLDER}/vms.qdb`
	if [[ $2 = "F" ]]; then
		bash ${QBOX_DIR}/bash_s/qemu-bootfile-reader.sh $1 ${NAME}
	fi 
	;;
	
	-[Hh]|--[Hh][Ee][Ll][Pp])
		printf "%s\n" "usage:QBox [Option]"
			
		printf "%s\n" "Options:		long Options" \
				"    -c,-C		--copyright, --COPYRIGHT" \
				"    -h,-H		--help,--HELP" \
				"     nocheck 		Do not check for packages" && echo
		printf "%s\n" "Contact me @ <github.com/nafiuShaibu>" && echo 
		printf "%s\n" "QBox help users create and manage virtual machines locally and remotely" \
			"by just knowing how to press keys like [ENTER] and answering yes or " \
			"no questions" && echo
		printf "%s\n" "To run this program on microsoft windows, install cygwin and Xserver." \
			"The program might not work very well on other shells like ksh, csh, tcsh. You" \
			"can make the neccesary changes to the code by reading the README file or use" \
			"sh/bash shell" && echo
	;;
	
	*)
	
	##check for paclages 
	if [[ "$1" != "nocheck" ]]; then
		bash ${QBOX_DIR}/bash_s/check_pkg_install.sh %CHECK_START%
	fi 
	
	type $NOTICE >/dev/null 2>&1 && $NOTICE -u low -t 3 -i ${QBOX_DIR}/icon/QBox.png QBox "The Easy VM Manager" 
	bash ${QBOX_DIR}/bash_s/qemu-ansi-art.sh
	
	##logger_func sed ':a;N;$!ba;s/\n/ /g'
	#1. :a create a label 'a'
	#2. N append the next line to the pattern space
	#3. $! if not the last line, ba branch (go to) label 'a'
	#4. s substitute, /\n/ regex for new line, / / by a space, /g global match (as many times as it can)
	function logger_logging(){
		if [ "`cat ${TEMP_FOLDER}/.error.tt`" != "" ]; then 
			${QBOX_DIR}/bin/qemubox_logger "`sed ':a;N;$!ba;s/\n/ /g' ${TEMP_FOLDER}/.error.tt`" ${LOG_DIR}/qboxlog
		
			rm -f ${TEMP_FOLDER}/.error.tt
		fi
		return 0
	}
	
	function other_options_menu(){
		clear
		tput bold
		echo -e "\t\t\tOther Options\n"
		tput sgr0
		echo -e "\t1. Information On Virtual Machines"
		echo -e "\t2. Create Shortcut"
		echo -e "\t3. QBox Logs"
		echo -e "\t0. Back \u2b05 \n\n"
	
		echo -en "\t\tEnter Option: "
		read -n 1 opt
	}	
	
	
	function qemu_menu_func(){
		clear
		echo -e "\t\t\t\t `${BOLD}` QBox Menu `${RESET}`\n"
		echo -e "\t1. Boot Created Virtual Machine"
		echo -e "\t2. Create New Virtual Machine"
		echo -e "\t3. Delete Virtual Machine"
		echo -e "\t4. Other Options"
		echo -e "\t5. Reconfigure Virtual Machine"
		echo -e "\t6. Stop Running Virtual Machine"
		echo -e "\t7. QBox Remote Manager"
		echo -e "\t8. Direct Linux Boot"
		echo -e "\t0. Exit `tput setaf 9` \U274C \n\n"
		tput sgr0
		
		echo -en "\t\tEnter Option: "
		read -n 1 option
	}


	while true
	do
		clear
		qemu_menu_func
	
		case $option in
			0) break;;
			1) 
				bash ${QBOX_DIR}/bash_s/qemu-sql-vms.sh l 2>/dev/null
		
				echo
				printf "%s" "Enter the name of the VM to boot[ENTER] "
				read name
				name=$(echo $name | awk '{print toupper($0)}') ##capitalise name
				
				
				if [[ -n $name ]]; then
					##bootvm=$(basename $(bash ${QBOX_DIR}/bash_s/qemu-sql-vms.sh s $name) 2>/dev/null)
					bootvm=$(bash ${QBOX_DIR}/bash_s/qemu-sql-vms.sh s $name)
					bash ${QBOX_DIR}/bash_s/qemu-bootfile-reader.sh $bootvm $name
				fi
		;;
			2) bash ${QBOX_DIR}/bash_s/qemu-im-box.sh ;;
			3) 
				bash ${QBOX_DIR}/bash_s/qemu-sql-vms.sh l 2>/dev/null
		
				echo
				printf "%s" "Enter the name of the VM to delete[ENTER] "
				read name
				name=$(echo $name | awk '{print toupper($0)}') ##capitalise name
				
				[ "$name" != "" ] && bash ${QBOX_DIR}/bash_s/qemu-sql-vms.sh d $name
		;;
			4) 
				
				while true
				do 
					clear 
					other_options_menu
					
					case $opt in
					0) break ;;
					1) 
						bash ${QBOX_DIR}/bash_s/qemu-sql-vms.sh l 2>/dev/null
						
						echo
						read -p "Choose a VM[ENTER] " name
						
						name=$(echo $name | awk '{print toupper($0)}') ##capitalise name
						
						if [[ -n $name ]]; then
							
							bootvm=$(bash ${QBOX_DIR}/bash_s/qemu-sql-vms.sh s $name)
							clear
							bash ${QBOX_DIR}/bash_s/qbox_display_vm_info.sh ${BOOT_DIR}/$bootvm
							
						fi 						
					;;
					2) bash ${QBOX_DIR}/bash_s/create_desktop_file.sh ;;
					3) bash ${QBOX_DIR}/bash_s/qboxlogs.sh ;;
					*) 
						clear
						echo "wrong Option"		
					 ;;
					esac
						
					echo -en "\n\n\t\t\tHit any key to continue"
					read -n 1 line
						
				done
				
			;;
			5) bash ${QBOX_DIR}/bash_s/qemu-reconfigure.sh ;;
			6) 
				vm_kill_term_eventhandler
				
				if [ ! -s ${QDB_FOLDER}/pid.qdb ]; then
					tput setaf 9
					echo -e "\n\n\t No VM is running.."
					tput sgr0
				else
					echo -e "\n\nRunning VMs..."
					declare -a TMP_PID_QDB=("`cat ${QDB_FOLDER}/pid.qdb`")
					
					let x=0
					for i in ${TMP_PID_QDB[@]}; do 
						
						(( x+=1 ))
						printf "%d) %s\n" $x `echo $i | cut -d "|" -f1`
					done
				
					read -p "Enter the name of VM to stop[ENTER] " vmn
					
					let x=0
					if [[ -n "$vmn" ]]; then
						name=$(echo $vmn | awk '{print toupper($0)}') ##capitalise name
					
						for i in `cut --delimiter "|" -f1 ${QDB_FOLDER}/pid.qdb`
						do 
							if [[ "$name" = $i ]];then
								x=`expr $x + 1`
							
								search="^$name\$"
								pid_vm=$(gawk -F "|" -v var=$search '$1 ~ var {print $2}' ${QDB_FOLDER}/pid.qdb) 
								
								kill -9 $pid_vm 2>/dev/null ##kill vm
								##This make sure that the name entered is deleted from the vms database
								echo $(gawk -F "|" -v var=$search '$1 !~ var {print $0}' ${QDB_FOLDER}/pid.qdb) > ${TEMP_FOLDER}/vms.tt
								##replace black or space character with newline character
								sed -e 's/[[:blank:]]\+/\n/g' ${TEMP_FOLDER}/vms.tt 2>/dev/null 1> ${QDB_FOLDER}/pid.qdb
								
								rm -f ${TEMP_FOLDER}/vms.tt ${TEMP_FOLDER}/.searchdel.tt 2>/dev/null
								break
							fi
						done
						
						tput setaf 9
						[ $x -eq 0 ] && echo -e "\n\tVM not running.."
						tput sgr0
					fi
				fi
		;;
			7) bash ${QBOX_DIR}/bash_s/qboxhttpd.sh ;;
			8) bash ${QBOX_DIR}/bash_s/direct_linux_boot.sh ;;
			*)
				clear
				echo "wrong Option";;
		esac
		
		echo -en "\n\n\t\t\tHit any key to continue"
		read -n 1 line
	done

	clear
esac

exit 0
